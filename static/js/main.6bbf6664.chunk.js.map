{"version":3,"sources":["components/Button/helpers.ts","components/Button/index.tsx","components/Dropdown/index.tsx","components/Challenge/index.tsx","components/App/index.tsx","index.tsx"],"names":["ButtonTypes","buttonTextMap","NewInvoice","MarkAsPaid","Edit","SaveAsDraft","Delete","NewItem","Button","type","isDark","className","cn","invoice","paid","edit","draft","delete","item","dark_mode","Dropdown","options","useState","selected","setSelected","showOptions","setShowOptions","handleClick","handleSelect","option","handleKeyDown","event","action","key","onClick","onKeyDown","role","tabIndex","map","Challenge","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAYA,E,2FAAAA,K,yBAAAA,E,0BAAAA,E,YAAAA,E,4BAAAA,E,gBAAAA,E,wBAAAA,M,KASL,IAAMC,GAAa,mBACvBD,EAAYE,WAAa,eADF,cAEvBF,EAAYG,WAAa,gBAFF,cAGvBH,EAAYI,KAAO,QAHI,cAIvBJ,EAAYK,YAAc,iBAJH,cAKvBL,EAAYM,OAAS,UALE,cAMvBN,EAAYO,QAAU,kBANC,G,eCqCXC,EA/BA,SAAC,GAMI,IALlBC,EAKiB,EALjBA,KAKiB,IAJjBC,cAIiB,SACjB,OAAKD,EAGH,yBACEE,UAAWC,IAAG,SAAU,CACtBC,QAASJ,IAAST,EAAYE,WAC9BY,KAAML,IAAST,EAAYG,WAC3BY,KAAMN,IAAST,EAAYI,KAC3BY,MAAOP,IAAST,EAAYK,YAC5BY,OAAQR,IAAST,EAAYM,OAC7BY,KAAMT,IAAST,EAAYO,QAC3BY,UAAWT,IARf,UAWGD,IAAST,EAAYE,YACpB,qBAAKS,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,iBAGJ,+BAAOV,EAAcQ,QAnBP,M,OCsCLW,G,MAhDE,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,QAElB,EAAgCC,mBAASD,EAAQ,IADzB,oBACxB,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAc,kBAAMD,GAAgBD,IACpCG,EAAe,SAACC,GACpBL,EAAYK,GACZF,KAEIG,EAAgB,SAACC,EAAOC,GAA2B,IAAnBH,EAAkB,uDAAT,KAC3B,UAAdE,EAAME,MACO,UAAXD,GAAoBL,IACT,WAAXK,GAAqBJ,EAAaC,KAI1C,OACE,sBAAKlB,UAAU,UAAf,UACE,qBACEA,UAAU,SACVuB,QAASP,EACTQ,UAAW,SAACJ,GAAD,OAAWD,EAAcC,EAAO,UAC3CK,KAAK,SACLC,SAAU,EALZ,SAOE,sBAAM1B,UAAU,WAAhB,SAA4BY,MAE7BE,GACC,qBAAKd,UAAU,UAAf,SACGU,EAAQiB,KAAI,SAACT,GAAD,OACX,wBAEElB,UAAU,SACVuB,QAAS,kBAAMN,EAAaC,IAC5BM,UAAW,SAACJ,GAAD,OAAWD,EAAcC,EAAO,SAAUF,IACrDO,KAAK,SACLC,SAAU,EANZ,SAQGR,GAPIA,aCrBJU,EAnBG,WAChB,OACE,gCACE,wCACA,cAAC,EAAD,CAAQ9B,KAAMT,EAAYE,aAC1B,cAAC,EAAD,CAAQO,KAAMT,EAAYG,aAC1B,cAAC,EAAD,CAAQM,KAAMT,EAAYI,OAC1B,cAAC,EAAD,CAAQK,KAAMT,EAAYI,KAAMM,QAAM,IACtC,cAAC,EAAD,CAAQD,KAAMT,EAAYK,cAC1B,cAAC,EAAD,CAAQI,KAAMT,EAAYK,YAAaK,QAAM,IAC7C,cAAC,EAAD,CAAQD,KAAMT,EAAYM,SAC1B,cAAC,EAAD,CAAQG,KAAMT,EAAYO,UAE1B,0CACA,cAAC,EAAD,CAAUc,QAAS,CAAC,YAAa,aAAc,cAAe,qBCLrDmB,MARf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,cAAC,EAAD,OCHN8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6bbf6664.chunk.js","sourcesContent":["export enum ButtonTypes {\n  NewInvoice = \"NEW_INVOICE\",\n  MarkAsPaid = \"MARK_AS_PAID\",\n  Edit = \"EDIT\",\n  SaveAsDraft = \"SAVE_AS_DRAFT\",\n  Delete = \"DELETE\",\n  NewItem = \"ADD_NEW_ITEM\",\n}\n\nexport const buttonTextMap = {\n  [ButtonTypes.NewInvoice]: \"New Invoice\",\n  [ButtonTypes.MarkAsPaid]: \"Mark as Paid\",\n  [ButtonTypes.Edit]: \"Edit\",\n  [ButtonTypes.SaveAsDraft]: \"Save as Draft\",\n  [ButtonTypes.Delete]: \"Delete\",\n  [ButtonTypes.NewItem]: \"+ Add New Item\",\n};\n","import cn from \"classnames\";\nimport { buttonTextMap, ButtonTypes } from \"./helpers\";\nimport \"./button.scss\";\n\n/**\n * Reusable button component\n * @param {ButtonTypes} type  accepts ButtonTypes: NewInvoice, MarkAsPaid, Edit, SaveAsDraft, Delete, NewItem\n * @param {boolean} isDark optional flag for dark mode on Edit and SaveAsDraft buttons (defaults to false)\n *\n * @example\n *    <Button\n *      type={ButtonTypes.Edit}\n *      isDark />\n *\n */\nconst Button = ({\n  type,\n  isDark = false,\n}: {\n  type: ButtonTypes;\n  isDark?: boolean;\n}): JSX.Element => {\n  if (!type) return null;\n\n  return (\n    <button\n      className={cn(\"button\", {\n        invoice: type === ButtonTypes.NewInvoice,\n        paid: type === ButtonTypes.MarkAsPaid,\n        edit: type === ButtonTypes.Edit,\n        draft: type === ButtonTypes.SaveAsDraft,\n        delete: type === ButtonTypes.Delete,\n        item: type === ButtonTypes.NewItem,\n        dark_mode: isDark,\n      })}\n    >\n      {type === ButtonTypes.NewInvoice && (\n        <div className=\"circle\">\n          <span className=\"plus_symbol\">+</span>\n        </div>\n      )}\n      <span>{buttonTextMap[type]}</span>\n    </button>\n  );\n};\n\nexport default Button;\n","import { useState } from \"react\";\nimport \"./dropdown.scss\";\n\n/**\n * Custom reusable select/dropdown component\n * @param {string[]} options string options for the dropdown\n *\n * @example\n *  <Dropdown\n *      options={[\"Option 1\", \"Option 2\", \"Option 3\"]} />\n *\n */\nconst Dropdown = ({ options }: { options: string[] }): JSX.Element => {\n  const placeholderText = \"Select an Option\";\n  const [selected, setSelected] = useState(options[0] || placeholderText);\n  const [showOptions, setShowOptions] = useState(false);\n\n  const handleClick = () => setShowOptions(!showOptions);\n  const handleSelect = (option) => {\n    setSelected(option);\n    handleClick();\n  };\n  const handleKeyDown = (event, action, option = null) => {\n    if (event.key === \"Enter\") {\n      if (action === \"click\") handleClick();\n      if (action === \"select\") handleSelect(option);\n    }\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div\n        className=\"select\"\n        onClick={handleClick}\n        onKeyDown={(event) => handleKeyDown(event, \"click\")}\n        role=\"button\"\n        tabIndex={0}\n      >\n        <span className=\"selected\">{selected}</span>\n      </div>\n      {showOptions && (\n        <div className=\"options\">\n          {options.map((option) => (\n            <option\n              key={option}\n              className=\"option\"\n              onClick={() => handleSelect(option)}\n              onKeyDown={(event) => handleKeyDown(event, \"select\", option)}\n              role=\"button\"\n              tabIndex={0}\n            >\n              {option}\n            </option>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dropdown;\n","import Button from \"../Button\";\nimport Dropdown from \"../Dropdown\";\nimport { ButtonTypes } from \"../Button/helpers\";\n\nconst Challenge = (): JSX.Element => {\n  return (\n    <div>\n      <h2>Button</h2>\n      <Button type={ButtonTypes.NewInvoice} />\n      <Button type={ButtonTypes.MarkAsPaid} />\n      <Button type={ButtonTypes.Edit} />\n      <Button type={ButtonTypes.Edit} isDark />\n      <Button type={ButtonTypes.SaveAsDraft} />\n      <Button type={ButtonTypes.SaveAsDraft} isDark />\n      <Button type={ButtonTypes.Delete} />\n      <Button type={ButtonTypes.NewItem} />\n\n      <h2>DropDown</h2>\n      <Dropdown options={[\"Net 1 Day\", \"Net 7 Days\", \"Net 14 Days\", \"Net 30 Days\"]} />\n    </div>\n  );\n};\n\nexport default Challenge;\n","import \"./App.scss\";\nimport \"normalize.css\";\nimport \"../../scss/global.scss\";\nimport Challenge from \"../Challenge\";\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"App\">\n      <Challenge />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}